// <auto-generated />
using System;
using JugueteriaAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JugueteriaAPI.Migrations
{
    [DbContext(typeof(JugueteriaContext))]
    partial class JugueteriaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("JugueteriaAPI.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Descripcion = "Juguetes que fomentan el aprendizaje y desarrollo",
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 157, DateTimeKind.Local).AddTicks(5495),
                            ImagenUrl = "/images/educativos.jpg",
                            Nombre = "Juguetes Educativos"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Descripcion = "Bloques, legos y sets de construcción",
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 157, DateTimeKind.Local).AddTicks(6236),
                            ImagenUrl = "/images/construccion.jpg",
                            Nombre = "Juguetes de Construcción"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Descripcion = "Muñecas, peluches y accesorios",
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 157, DateTimeKind.Local).AddTicks(6240),
                            ImagenUrl = "/images/munecas.jpg",
                            Nombre = "Muñecas y Accesorios"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            Descripcion = "Juguetes con tecnología y electrónica",
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 157, DateTimeKind.Local).AddTicks(6242),
                            ImagenUrl = "/images/electronicos.jpg",
                            Nombre = "Juguetes Electrónicos"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            Descripcion = "Juegos de mesa para toda la familia",
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 157, DateTimeKind.Local).AddTicks(6243),
                            ImagenUrl = "/images/mesa.jpg",
                            Nombre = "Juegos de Mesa"
                        });
                });

            modelBuilder.Entity("JugueteriaAPI.Models.DetallePedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesPedido");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CiudadEnvio")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPostalEnvio")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("DireccionEnvio")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("FechaEntrega")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("FechaEnvio")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("Impuestos")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Notas")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("NumeroPedido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumeroPedido")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("EdadRecomendada")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("EnOferta")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagenUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("PrecioOferta")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CategoriaId = 1,
                            Descripcion = "Bloques de colores para aprender formas y colores",
                            EdadRecomendada = "3-6 años",
                            EnOferta = true,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(2361),
                            ImagenUrl = "/images/bloques.jpg",
                            Marca = "EducaKids",
                            Nombre = "Set de Bloques Educativos",
                            Precio = 29.99m,
                            PrecioOferta = 24.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CategoriaId = 2,
                            Descripcion = "Set de construcción de la ciudad policial",
                            EdadRecomendada = "6-12 años",
                            EnOferta = false,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(4319),
                            ImagenUrl = "/images/lego-policia.jpg",
                            Marca = "LEGO",
                            Nombre = "Lego City Policía",
                            Precio = 45.99m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            CategoriaId = 3,
                            Descripcion = "Muñeca Barbie con vestidos elegantes",
                            EdadRecomendada = "3-8 años",
                            EnOferta = true,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(4324),
                            ImagenUrl = "/images/barbie.jpg",
                            Marca = "Mattel",
                            Nombre = "Muñeca Barbie Fashionista",
                            Precio = 19.99m,
                            PrecioOferta = 15.99m,
                            Stock = 25
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            CategoriaId = 4,
                            Descripcion = "Robot educativo para aprender programación",
                            EdadRecomendada = "8-14 años",
                            EnOferta = false,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(4326),
                            ImagenUrl = "/images/robot.jpg",
                            Marca = "TechToys",
                            Nombre = "Robot Programable",
                            Precio = 89.99m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            CategoriaId = 5,
                            Descripcion = "Versión infantil del clásico juego de mesa",
                            EdadRecomendada = "5-8 años",
                            EnOferta = false,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(4328),
                            ImagenUrl = "/images/monopoly.jpg",
                            Marca = "Hasbro",
                            Nombre = "Monopoly Junior",
                            Precio = 24.99m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            CategoriaId = 1,
                            Descripcion = "Puzzle de paisaje para toda la familia",
                            EdadRecomendada = "8+ años",
                            EnOferta = true,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(4330),
                            ImagenUrl = "/images/puzzle.jpg",
                            Marca = "Ravensburger",
                            Nombre = "Puzzle 1000 Piezas",
                            Precio = 34.99m,
                            PrecioOferta = 29.99m,
                            Stock = 20
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            CategoriaId = 1,
                            Descripcion = "Set completo de pinturas y pinceles",
                            EdadRecomendada = "6-12 años",
                            EnOferta = false,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(4332),
                            ImagenUrl = "/images/pinturas.jpg",
                            Marca = "ArtCraft",
                            Nombre = "Set de Pinturas",
                            Precio = 39.99m,
                            Stock = 35
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            CategoriaId = 4,
                            Descripcion = "Pista de carreras con coches de control remoto",
                            EdadRecomendada = "4-10 años",
                            EnOferta = true,
                            FechaCreacion = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(4334),
                            ImagenUrl = "/images/carrera.jpg",
                            Marca = "HotWheels",
                            Nombre = "Carrera de Coches",
                            Precio = 59.99m,
                            PrecioOferta = 49.99m,
                            Stock = 18
                        });
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Ciudad")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Apellido = "Pérez",
                            Ciudad = "Madrid",
                            CodigoPostal = "28001",
                            Direccion = "Calle Principal 123",
                            Email = "juan.perez@email.com",
                            FechaRegistro = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(5101),
                            Nombre = "Juan",
                            Telefono = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Apellido = "García",
                            Ciudad = "Barcelona",
                            CodigoPostal = "08001",
                            Direccion = "Avenida Central 456",
                            Email = "maria.garcia@email.com",
                            FechaRegistro = new DateTime(2025, 7, 30, 0, 59, 48, 158, DateTimeKind.Local).AddTicks(6412),
                            Nombre = "María",
                            Telefono = "987654321"
                        });
                });

            modelBuilder.Entity("JugueteriaAPI.Models.DetallePedido", b =>
                {
                    b.HasOne("JugueteriaAPI.Models.Pedido", "Pedido")
                        .WithMany("DetallesPedido")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JugueteriaAPI.Models.Producto", "Producto")
                        .WithMany("DetallesPedido")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Pedido", b =>
                {
                    b.HasOne("JugueteriaAPI.Models.Usuario", "Usuario")
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Producto", b =>
                {
                    b.HasOne("JugueteriaAPI.Models.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Pedido", b =>
                {
                    b.Navigation("DetallesPedido");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Producto", b =>
                {
                    b.Navigation("DetallesPedido");
                });

            modelBuilder.Entity("JugueteriaAPI.Models.Usuario", b =>
                {
                    b.Navigation("Pedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
